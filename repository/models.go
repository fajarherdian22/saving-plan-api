// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type TransactionsRecordType string

const (
	TransactionsRecordTypeIncome  TransactionsRecordType = "income"
	TransactionsRecordTypeExpense TransactionsRecordType = "expense"
)

func (e *TransactionsRecordType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionsRecordType(s)
	case string:
		*e = TransactionsRecordType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionsRecordType: %T", src)
	}
	return nil
}

type NullTransactionsRecordType struct {
	TransactionsRecordType TransactionsRecordType `json:"transactions_record_type"`
	Valid                  bool                   `json:"valid"` // Valid is true if TransactionsRecordType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionsRecordType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionsRecordType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionsRecordType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionsRecordType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionsRecordType), nil
}

type SavingGoal struct {
	ID            string    `json:"id"`
	UserID        string    `json:"user_id"`
	Name          string    `json:"name"`
	TargetAmount  float64   `json:"target_amount"`
	CurrentAmount float64   `json:"current_amount"`
	TargetTime    time.Time `json:"target_time"`
	CreatedAt     time.Time `json:"created_at"`
}

type TransactionsRecord struct {
	ID        string                 `json:"id"`
	UserID    string                 `json:"user_id"`
	GoalID    sql.NullString         `json:"goal_id"`
	Amount    float64                `json:"amount"`
	Type      TransactionsRecordType `json:"type"`
	Category  string                 `json:"category"`
	Name      string                 `json:"name"`
	CreatedAt time.Time              `json:"created_at"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}
