// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: savings_goals.sql

package repository

import (
	"context"
	"time"
)

const createSavingPlan = `-- name: CreateSavingPlan :exec
INSERT INTO saving_goals (
    id,
    user_id,
    name,
    target_amount,
    current_amount,
    target_time,
    created_at
) VALUES (
    ?, ?, ?, ?, ?, ?, NOW()
)
`

type CreateSavingPlanParams struct {
	ID            string    `json:"id"`
	UserID        string    `json:"user_id"`
	Name          string    `json:"name"`
	TargetAmount  float64   `json:"target_amount"`
	CurrentAmount float64   `json:"current_amount"`
	TargetTime    time.Time `json:"target_time"`
}

func (q *Queries) CreateSavingPlan(ctx context.Context, arg CreateSavingPlanParams) error {
	_, err := q.db.ExecContext(ctx, createSavingPlan,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.TargetAmount,
		arg.CurrentAmount,
		arg.TargetTime,
	)
	return err
}

const getSavingPlan = `-- name: GetSavingPlan :one
SELECT id, user_id, name, target_amount, current_amount, target_time, created_at FROM saving_goals
WHERE user_id = ? AND id = ? LIMIT 1
`

type GetSavingPlanParams struct {
	UserID string `json:"user_id"`
	ID     string `json:"id"`
}

func (q *Queries) GetSavingPlan(ctx context.Context, arg GetSavingPlanParams) (SavingGoal, error) {
	row := q.db.QueryRowContext(ctx, getSavingPlan, arg.UserID, arg.ID)
	var i SavingGoal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.TargetTime,
		&i.CreatedAt,
	)
	return i, err
}
